// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/vadimpk/go-gym-manager-api/internal/domain"
	service "github.com/vadimpk/go-gym-manager-api/internal/service"
)

// MockManagers is a mock of Managers interface.
type MockManagers struct {
	ctrl     *gomock.Controller
	recorder *MockManagersMockRecorder
}

// MockManagersMockRecorder is the mock recorder for MockManagers.
type MockManagersMockRecorder struct {
	mock *MockManagers
}

// NewMockManagers creates a new mock instance.
func NewMockManagers(ctrl *gomock.Controller) *MockManagers {
	mock := &MockManagers{ctrl: ctrl}
	mock.recorder = &MockManagersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagers) EXPECT() *MockManagersMockRecorder {
	return m.recorder
}

// RefreshTokens mocks base method.
func (m *MockManagers) RefreshTokens(refreshToken string) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", refreshToken)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockManagersMockRecorder) RefreshTokens(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockManagers)(nil).RefreshTokens), refreshToken)
}

// SignIn mocks base method.
func (m *MockManagers) SignIn(input domain.SignInInput) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", input)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockManagersMockRecorder) SignIn(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockManagers)(nil).SignIn), input)
}

// MockMembers is a mock of Members interface.
type MockMembers struct {
	ctrl     *gomock.Controller
	recorder *MockMembersMockRecorder
}

// MockMembersMockRecorder is the mock recorder for MockMembers.
type MockMembersMockRecorder struct {
	mock *MockMembers
}

// NewMockMembers creates a new mock instance.
func NewMockMembers(ctrl *gomock.Controller) *MockMembers {
	mock := &MockMembers{ctrl: ctrl}
	mock.recorder = &MockMembersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMembers) EXPECT() *MockMembersMockRecorder {
	return m.recorder
}

// CreateNew mocks base method.
func (m *MockMembers) CreateNew(input domain.MemberCreateInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNew", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNew indicates an expected call of CreateNew.
func (mr *MockMembersMockRecorder) CreateNew(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNew", reflect.TypeOf((*MockMembers)(nil).CreateNew), input)
}

// DeleteByID mocks base method.
func (m *MockMembers) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockMembersMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMembers)(nil).DeleteByID), id)
}

// DeleteMembership mocks base method.
func (m *MockMembers) DeleteMembership(memberID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMembership", memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMembership indicates an expected call of DeleteMembership.
func (mr *MockMembersMockRecorder) DeleteMembership(memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMembership", reflect.TypeOf((*MockMembers)(nil).DeleteMembership), memberID)
}

// EndVisit mocks base method.
func (m *MockMembers) EndVisit(memberID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndVisit", memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndVisit indicates an expected call of EndVisit.
func (mr *MockMembersMockRecorder) EndVisit(memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndVisit", reflect.TypeOf((*MockMembers)(nil).EndVisit), memberID)
}

// GetByID mocks base method.
func (m *MockMembers) GetByID(id int) (domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMembersMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMembers)(nil).GetByID), id)
}

// GetByPhoneNumber mocks base method.
func (m *MockMembers) GetByPhoneNumber(num string) (domain.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPhoneNumber", num)
	ret0, _ := ret[0].(domain.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPhoneNumber indicates an expected call of GetByPhoneNumber.
func (mr *MockMembersMockRecorder) GetByPhoneNumber(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPhoneNumber", reflect.TypeOf((*MockMembers)(nil).GetByPhoneNumber), num)
}

// GetMembership mocks base method.
func (m *MockMembers) GetMembership(memberID int) (domain.MembersMembershipResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMembership", memberID)
	ret0, _ := ret[0].(domain.MembersMembershipResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMembership indicates an expected call of GetMembership.
func (mr *MockMembersMockRecorder) GetMembership(memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMembership", reflect.TypeOf((*MockMembers)(nil).GetMembership), memberID)
}

// SetMembership mocks base method.
func (m *MockMembers) SetMembership(memberID, membershipID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMembership", memberID, membershipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMembership indicates an expected call of SetMembership.
func (mr *MockMembersMockRecorder) SetMembership(memberID, membershipID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMembership", reflect.TypeOf((*MockMembers)(nil).SetMembership), memberID, membershipID)
}

// SetNewVisit mocks base method.
func (m *MockMembers) SetNewVisit(memberID, managerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewVisit", memberID, managerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewVisit indicates an expected call of SetNewVisit.
func (mr *MockMembersMockRecorder) SetNewVisit(memberID, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewVisit", reflect.TypeOf((*MockMembers)(nil).SetNewVisit), memberID, managerID)
}

// UpdateByID mocks base method.
func (m *MockMembers) UpdateByID(id int, input domain.MemberUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockMembersMockRecorder) UpdateByID(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockMembers)(nil).UpdateByID), id, input)
}

// MockMemberships is a mock of Memberships interface.
type MockMemberships struct {
	ctrl     *gomock.Controller
	recorder *MockMembershipsMockRecorder
}

// MockMembershipsMockRecorder is the mock recorder for MockMemberships.
type MockMembershipsMockRecorder struct {
	mock *MockMemberships
}

// NewMockMemberships creates a new mock instance.
func NewMockMemberships(ctrl *gomock.Controller) *MockMemberships {
	mock := &MockMemberships{ctrl: ctrl}
	mock.recorder = &MockMembershipsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberships) EXPECT() *MockMembershipsMockRecorder {
	return m.recorder
}

// CreateNew mocks base method.
func (m *MockMemberships) CreateNew(input domain.MembershipCreateInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNew", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNew indicates an expected call of CreateNew.
func (mr *MockMembershipsMockRecorder) CreateNew(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNew", reflect.TypeOf((*MockMemberships)(nil).CreateNew), input)
}

// DeleteByID mocks base method.
func (m *MockMemberships) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockMembershipsMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockMemberships)(nil).DeleteByID), id)
}

// GetByID mocks base method.
func (m *MockMemberships) GetByID(id int) (domain.Membership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Membership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockMembershipsMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockMemberships)(nil).GetByID), id)
}

// UpdateByID mocks base method.
func (m *MockMemberships) UpdateByID(id int, input domain.MembershipUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockMembershipsMockRecorder) UpdateByID(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockMemberships)(nil).UpdateByID), id, input)
}

// MockTrainers is a mock of Trainers interface.
type MockTrainers struct {
	ctrl     *gomock.Controller
	recorder *MockTrainersMockRecorder
}

// MockTrainersMockRecorder is the mock recorder for MockTrainers.
type MockTrainersMockRecorder struct {
	mock *MockTrainers
}

// NewMockTrainers creates a new mock instance.
func NewMockTrainers(ctrl *gomock.Controller) *MockTrainers {
	mock := &MockTrainers{ctrl: ctrl}
	mock.recorder = &MockTrainersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrainers) EXPECT() *MockTrainersMockRecorder {
	return m.recorder
}

// CreateNew mocks base method.
func (m *MockTrainers) CreateNew(input domain.TrainerCreateInput) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNew", input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNew indicates an expected call of CreateNew.
func (mr *MockTrainersMockRecorder) CreateNew(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNew", reflect.TypeOf((*MockTrainers)(nil).CreateNew), input)
}

// DeleteByID mocks base method.
func (m *MockTrainers) DeleteByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockTrainersMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockTrainers)(nil).DeleteByID), id)
}

// EndVisit mocks base method.
func (m *MockTrainers) EndVisit(trainerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndVisit", trainerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndVisit indicates an expected call of EndVisit.
func (mr *MockTrainersMockRecorder) EndVisit(trainerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndVisit", reflect.TypeOf((*MockTrainers)(nil).EndVisit), trainerID)
}

// GetByID mocks base method.
func (m *MockTrainers) GetByID(id int) (domain.Trainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(domain.Trainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTrainersMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTrainers)(nil).GetByID), id)
}

// SetNewVisit mocks base method.
func (m *MockTrainers) SetNewVisit(trainerID, managerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNewVisit", trainerID, managerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNewVisit indicates an expected call of SetNewVisit.
func (mr *MockTrainersMockRecorder) SetNewVisit(trainerID, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNewVisit", reflect.TypeOf((*MockTrainers)(nil).SetNewVisit), trainerID, managerID)
}

// UpdateByID mocks base method.
func (m *MockTrainers) UpdateByID(id int, input domain.TrainerUpdateInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockTrainersMockRecorder) UpdateByID(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockTrainers)(nil).UpdateByID), id, input)
}
